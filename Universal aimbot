local Rayfield = loadstring(game:HttpGet('https://raw.githubusercontent.com/Explosive-Soda/HAPPY-SCRIPT/refs/heads/main/Rayfield%20modified'))()

local HttpService = game:GetService("HttpService")
local RunService = game:GetService("RunService")
local TeleportService = game:GetService("TeleportService")
local players = game:GetService("Players")
local wrk = game:GetService("Workspace")
local UserInputService = game:GetService("UserInputService")
local plr = players.LocalPlayer
local hrp = plr.Character:FindFirstChild("HumanoidRootPart")
local humanoid = plr.Character:FindFirstChild("Humanoid")

local function onCharacterAdded(character)
    hrp = character:WaitForChild("HumanoidRootPart")
    humanoid = character:WaitForChild("Humanoid")
end

plr.CharacterAdded:Connect(onCharacterAdded)

if plr.Character then
    onCharacterAdded(plr.Character)
end

local camera = wrk.CurrentCamera
local mouse = plr:GetMouse()

local httprequest = (syn and syn.request) or (http and http.request) or http_request or (fluxus and fluxus.request) or request

local hue = 0
local rainbowFov = false
local rainbowSpeed = 0.005

local aimFov = 150
local aimParts = {"Head"}
local aiming = false
local predictionStrength = 0.03
local smoothing = 0.97

local aimbotEnabled = false
local wallCheck = true
local stickyAimEnabled = false
local teamCheck = false
local healthCheck = false
local minHealth = 1

local antiAim = false
local antiAimAmountX = 0
local antiAimAmountY = -100
local antiAimAmountZ = 0
local antiAimMethod = "Reset Velo"
local randomVeloRange = 100

local spinBot = false
local spinBotSpeed = 20

local circleColor = Color3.fromRGB(255, 0, 0)
local targetedCircleColor = Color3.fromRGB(0, 255, 0)

local aimViewerEnabled = false
local ignoreSelf = true

-- ESP 变量
local espEnabled = false
local espTeamCheck = false
local espColor = Color3.new(1, 1, 1)
local espToggleKey = Enum.KeyCode.T

local Window = Rayfield:CreateWindow({
    Name = "Universal aimbot",
    LoadingTitle = "Loading...",
    LoadingSubtitle = "Soda made this",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = "Universal aimbot",
        FileName = "Version"
    },
})

local Aimbot = Window:CreateTab("Aimbot")
local ESP = Window:CreateTab("ESP")
local AntiAim = Window:CreateTab("Anti-Aim")
local Misc = Window:CreateTab("Misc")

local fovCircle = Drawing.new("Circle")
fovCircle.Thickness = 2
fovCircle.Radius = aimFov
fovCircle.Filled = false
fovCircle.Color = circleColor
fovCircle.Visible = false

local currentTarget = nil

-- ESP 功能
local esptoggle = ESP:CreateToggle({
    Name = "ESP",
    CurrentValue = false,
    Flag = "ESP",
    Callback = function(Value)
        espEnabled = Value
    end
})

local espteamcheck = ESP:CreateToggle({
    Name = "Team Check",
    CurrentValue = false,
    Flag = "ESPTeamCheck",
    Callback = function(Value)
        espTeamCheck = Value
    end
})

local espcolorpicker = ESP:CreateColorPicker({
    Name = "ESP Color",
    Color = espColor,
    Callback = function(Color)
        espColor = Color
    end
})

local toggleKeySection = ESP:CreateSection("Hotkey")

local espKeybind = ESP:CreateKeybind({
    Name = "ESP Toggle Keybind",
    CurrentKeybind = "T",
    HoldToInteract = false,
    Flag = "ESPKeybind",
    Callback = function(Keybind)
        Rayfield:Notify({
            Title = "Keybind Set",
            Content = "ESP toggle key set to: " .. Keybind,
            Duration = 1,
            Image = 4483362458
        })
    end,
})

-- ESP渲染逻辑
RunService.RenderStepped:Connect(function()
    for _, player in ipairs(players:GetPlayers()) do
        if player ~= plr and player.Character and player.Character:FindFirstChild("Humanoid") then
            local char = player.Character
            local alive = char.Humanoid.Health > 0
            local isEnemy = not espTeamCheck or player.TeamColor ~= plr.TeamColor

            if alive and isEnemy then
                if not char:FindFirstChild("ESP_Highlight") then
                    local hl = Instance.new("Highlight", char)
                    hl.Name = "ESP_Highlight"
                    hl.FillColor = espColor
                    hl.OutlineTransparency = 0.5
                    hl.OutlineColor = Color3.new(0, 0, 0)
                    hl.Adornee = char
                    hl.Enabled = espEnabled
                else
                    local hl = char:FindFirstChild("ESP_Highlight")
                    hl.FillColor = espColor
                    hl.OutlineTransparency = 0.5
                    hl.OutlineColor = Color3.new(0, 0, 0)
                    hl.Enabled = espEnabled
                end
            else
                if char:FindFirstChild("ESP_Highlight") then
                    char.ESP_Highlight.Enabled = false
                end
            end
        end
    end
end)

-- 快捷键功能
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if not gameProcessed then
        local config = Rayfield:GetConfiguration()
        if config and config.ESPKeybind then
            local keyCode = Enum.KeyCode[config.ESPKeybind]
            if input.KeyCode == keyCode then
                espEnabled = not espEnabled
                esptoggle:Set(espEnabled)
                Rayfield:Notify({
                    Title = "ESP",
                    Content = espEnabled and "Enabled" or "Disabled",
                    Duration = 1,
                    Image = 4483362458
                })
            end
        end
    end
end)

-- 原有功能代码
local function checkTeam(player)
    if teamCheck and player.Team == plr.Team then
        return true
    end
    return false
end

local function checkWall(targetCharacter)
    local targetHead = targetCharacter:FindFirstChild("Head")
    if not targetHead then return true end

    local origin = camera.CFrame.Position
    local direction = (targetHead.Position - origin).unit * (targetHead.Position - origin).magnitude
    local raycastParams = RaycastParams.new()
    raycastParams.FilterDescendantsInstances = {plr.Character, targetCharacter}
    raycastParams.FilterType = Enum.RaycastFilterType.Blacklist

    local raycastResult = wrk:Raycast(origin, direction, raycastParams)
    return raycastResult and raycastResult.Instance ~= nil
end

local function getClosestPart(character)
    local closestPart = nil
    local shortestCursorDistance = aimFov
    local cameraPos = camera.CFrame.Position

    for _, partName in ipairs(aimParts) do
        local part = character:FindFirstChild(partName)
        if part then
            local partPos = camera:WorldToViewportPoint(part.Position)
            local screenPos = Vector2.new(partPos.X, partPos.Y)
            local cursorDistance = (screenPos - Vector2.new(mouse.X, mouse.Y)).Magnitude

            if cursorDistance < shortestCursorDistance and partPos.Z > 0 then
                shortestCursorDistance = cursorDistance
                closestPart = part
            end
        end
    end

    return closestPart
end

local function getTarget()
    local nearestPlayer = nil
    local closestPart = nil
    local shortestCursorDistance = aimFov

    for _, player in ipairs(players:GetPlayers()) do
        if player ~= plr and player.Character and not checkTeam(player) then
            if player.Character.Humanoid.Health >= minHealth or not healthCheck then
                local targetPart = getClosestPart(player.Character)
                if targetPart then
                    local screenPos = camera:WorldToViewportPoint(targetPart.Position)
                    local cursorDistance = (Vector2.new(screenPos.X, screenPos.Y) - Vector2.new(mouse.X, mouse.Y)).Magnitude

                    if cursorDistance < shortestCursorDistance then
                        if not wallCheck or not checkWall(player.Character) then
                            shortestCursorDistance = cursorDistance
                            nearestPlayer = player
                            closestPart = targetPart
                        end
                    end
                end
            end
        end
    end

    return nearestPlayer, closestPart
end

local function predict(player, part)
    if player and part then
        local velocity = player.Character.HumanoidRootPart.Velocity
        local predictedPosition = part.Position + (velocity * predictionStrength)
        return predictedPosition
    end
    return nil
end

local function smooth(from, to)
    return from:Lerp(to, smoothing)
end

local function aimAt(player, part)
    local predictedPosition = predict(player, part)
    if predictedPosition then
        if player.Character.Humanoid.Health >= minHealth or not healthCheck then
            local targetCFrame = CFrame.new(camera.CFrame.Position, predictedPosition)
            camera.CFrame = smooth(camera.CFrame, targetCFrame)
        end
    end
end

RunService.RenderStepped:Connect(function()
    if aimbotEnabled then
        local offset = 50
        fovCircle.Position = Vector2.new(mouse.X, mouse.Y + offset)

        if rainbowFov then
            hue = hue + rainbowSpeed
            if hue > 1 then hue = 0 end
            fovCircle.Color = Color3.fromHSV(hue, 1, 1)
        else
            if aiming and currentTarget then
                fovCircle.Color = targetedCircleColor
            else
                fovCircle.Color = circleColor
            end
        end

        if aiming then
            if stickyAimEnabled and currentTarget then
                local headPos = camera:WorldToViewportPoint(currentTarget.Character.Head.Position)
                local screenPos = Vector2.new(headPos.X, headPos.Y)
                local cursorDistance = (screenPos - Vector2.new(mouse.X, mouse.Y)).Magnitude

                if cursorDistance > aimFov or (wallCheck and checkWall(currentTarget.Character)) or checkTeam(currentTarget) then
                    currentTarget = nil
                end
            end

            if not stickyAimEnabled or not currentTarget then
                local target, targetPart = getTarget()
                currentTarget = target
                currentTargetPart = targetPart
            end

            if currentTarget and currentTargetPart then
                aimAt(currentTarget, currentTargetPart)
            end
        else
            currentTarget = nil
        end
    end
end)

RunService.Heartbeat:Connect(function()
    if antiAim then
        if antiAimMethod == "Reset Velo" then
            local vel = hrp.Velocity
            hrp.Velocity = Vector3.new(antiAimAmountX, antiAimAmountY, antiAimAmountZ)
            RunService.RenderStepped:Wait()
            hrp.Velocity = vel
        elseif antiAimMethod == "Reset Pos [BROKEN]" then
            local pos = hrp.CFrame
            hrp.Velocity = Vector3.new(antiAimAmountX, antiAimAmountY, antiAimAmountZ)
            RunService.RenderStepped:Wait()
            hrp.CFrame = pos
        elseif antiAimMethod == "Random Velo" then
            local vel = hrp.Velocity
            local a = math.random(-randomVeloRange,randomVeloRange)
            local s = math.random(-randomVeloRange,randomVeloRange)
            local d = math.random(-randomVeloRange,randomVeloRange)
            hrp.Velocity = Vector3.new(a,s,d)
            RunService.RenderStepped:Wait()
            hrp.Velocity = vel
        end
    end
end)

mouse.Button2Down:Connect(function()
    if aimbotEnabled then
        aiming = true
    end
end)

mouse.Button2Up:Connect(function()
    if aimbotEnabled then
        aiming = false
    end
end)

local aimbot = Aimbot:CreateToggle({
    Name = "Aimbot",
    CurrentValue = false,
    Flag = "Aimbot",
    Callback = function(Value)
        aimbotEnabled = Value
    end
})

local aimpart = Aimbot:CreateDropdown({
    Name = "Aim Part",
    Options = {"Head","HumanoidRootPart","Left Arm","Right Arm","Torso","Left Leg","Right Leg"},
    CurrentOption = {"Head"},
    MultipleOptions = true,
    Flag = "AimPart",
    Callback = function(Options)
        aimParts = Options
    end,
 })

local smoothingslider = Aimbot:CreateSlider({
    Name = "Smoothing",
    Range = {0, 100},
    Increment = 1,
    CurrentValue = 3,
    Flag = "Smoothing",
    Callback = function(Value)
        smoothing = 1 - (Value / 100)
    end,
})

local predictionstrength = Aimbot:CreateSlider({
    Name = "Prediction Strength",
    Range = {0, 0.2},
    Increment = 0.001,
    CurrentValue = 0.03,
    Flag = "PredictionStrength",
    Callback = function(Value)
        predictionStrength = Value
    end,
})

local fovvisibility = Aimbot:CreateToggle({
    Name = "Fov Visibility",
    CurrentValue = false,
    Flag = "FovVisibility",
    Callback = function(Value)
        fovCircle.Visible = Value and aimbotEnabled
    end
})

local aimbotfov = Aimbot:CreateSlider({
    Name = "Aimbot Fov",
    Range = {0, 1000},
    Increment = 1,
    CurrentValue = 150,
    Flag = "AimbotFov",
    Callback = function(Value)
        aimFov = Value
        fovCircle.Radius = aimFov
    end,
})

local wallcheck = Aimbot:CreateToggle({
    Name = "Wall Check",
    CurrentValue = true,
    Flag = "WallCheck",
    Callback = function(Value)
        wallCheck = Value
    end
})

local stickyaim = Aimbot:CreateToggle({
    Name = "Sticky Aim",
    CurrentValue = false,
    Flag = "StickyAim",
    Callback = function(Value)
        stickyAimEnabled = Value
    end
})

local teamchecktoggle = Aimbot:CreateToggle({
    Name = "Team Check",
    CurrentValue = false,
    Flag = "TeamCheck",
    Callback = function(Value)
        teamCheck = Value
    end
})

local healthchecktoggle = Aimbot:CreateToggle({
    Name = "Health Check",
    CurrentValue = false,
    Flag = "HealthCheck",
    Callback = function(Value)
        healthCheck = Value
    end
})

local minhealth = Aimbot:CreateSlider({
    Name = "Min Health",
    Range = {0, 100},
    Increment = 1,
    CurrentValue = 1,
    Flag = "MinHealth",
    Callback = function(Value)
        minHealth = Value
    end,
})

local circlecolor = Aimbot:CreateColorPicker({
    Name = "Fov Color",
    Color = circleColor,
    Callback = function(Color)
        circleColor = Color
        fovCircle.Color = Color
    end
})

local targetedcirclecolor = Aimbot:CreateColorPicker({
    Name = "Targeted Fov Color",
    Color = targetedCircleColor,
    Callback = function(Color)
        targetedCircleColor = Color
    end
})

local circlerainbow = Aimbot:CreateToggle({
    Name = "Rainbow Fov",
    CurrentValue = false,
    Flag = "RainbowFov",
    Callback = function(Value)
        rainbowFov = Value
    end
})

local antiaimtoggle = AntiAim:CreateToggle({
    Name = "Anti-Aim",
    CurrentValue = false,
    Flag = "AntiAim",
    Callback = function(Value)
        antiAim = Value
        if Value then
            Rayfield:Notify({Title = "Anti-Aim", Content = "Enabled!", Duration = 1, Image = 4483362458,})
        else
            Rayfield:Notify({Title = "Anti-Aim", Content = "Disabled!", Duration = 1, Image = 4483362458,})
        end
    end
})

local antiaimmethod = AntiAim:CreateDropdown({
    Name = "Anti-Aim Method",
    Options = {"Reset Velo","Random Velo","Reset Pos [BROKEN]"},
    CurrentOption = "Reset Velo",
    Flag = "AntiAimMethod",
    Callback = function(Option)
        antiAimMethod = type(Option) == "table" and Option[1] or Option
        if antiAimMethod == "Reset Velo" then
            Rayfield:Notify({Title = "Reset Velocity", Content = "Nobody will see it, but exploiters will aim in the wrong place.", Duration = 5, Image = 4483362458,})
        elseif antiAimMethod == "Reset Pos [BROKEN]" then
            Rayfield:Notify({Title = "Reset Pos [BROKEN]", Content = "This is a bit buggy right now, so idk if it works that well", Duration = 5, Image = 4483362458,})
        elseif antiAimMethod == "Random Velo" then
            Rayfield:Notify({Title = "Random Velocity", Content = "Depending on ping some peoplev will see u 'teleporting' around but you are actually in the same spot the entire time.", Duration = 5, Image = 4483362458,})
        end
    end,
})

local antiaimamountx = AntiAim:CreateSlider({
    Name = "Anti-Aim Amount X",
    Range = {-1000, 1000},
    Increment = 10,
    CurrentValue = 0,
    Flag = "AntiAimAmountX",
    Callback = function(Value)
        antiAimAmountX = Value
    end,
})

local antiaimamounty = AntiAim:CreateSlider({
    Name = "Anti-Aim Amount Y",
    Range = {-1000, 1000},
    Increment = 10,
    CurrentValue = -100,
    Flag = "AntiAimAmountY",
    Callback = function(Value)
        antiAimAmountY = Value
    end,
})

local antiaimamountz = AntiAim:CreateSlider({
    Name = "Anti-Aim Amount Z",
    Range = {-1000, 1000},
    Increment = 10,
    CurrentValue = 0,
    Flag = "AntiAimAmountZ",
    Callback = function(Value)
        antiAimAmountZ = Value
    end,
})

local randomvelorange = AntiAim:CreateSlider({
    Name = "Random Velo Range",
    Range = {0, 1000},
    Increment = 10,
    CurrentValue = 100,
    Flag = "RandomVeloRange",
    Callback = function(Value)
        randomVeloRange = Value
    end,
})

local spinbottoggle = Misc:CreateToggle({
    Name = "Spin-Bot",
    CurrentValue = false,
    Flag = "SpinBot",
    Callback = function(Value)
        spinBot = Value
        if Value then
            for i,v in pairs(hrp:GetChildren()) do
                if v.Name == "Spinning" then
                    v:Destroy()
                end
            end
            plr.Character.Humanoid.AutoRotate = false
            local Spin = Instance.new("BodyAngularVelocity")
            Spin.Name = "Spinning"
            Spin.Parent = hrp
            Spin.MaxTorque = Vector3.new(0, math.huge, 0)
            Spin.AngularVelocity = Vector3.new(0,spinBotSpeed,0)
            Rayfield:Notify({Title = "Spin Bot", Content = "Enabled!", Duration = 1, Image = 4483362458,})
        else
            for i,v in pairs(hrp:GetChildren()) do
                if v.Name == "Spinning" then
                    v:Destroy()
                end
            end
            plr.Character.Humanoid.AutoRotate = true
            Rayfield:Notify({Title = "Spin Bot", Content = "Disabled!", Duration = 1, Image = 4483362458,})
        end
    end
})

local spinbotspeed = Misc:CreateSlider({
    Name = "Spin-Bot Speed",
    Range = {0, 1000},
    Increment = 1,
    CurrentValue = 20,
    Flag = "SpinBotSpeed",
    Callback = function(Value)
        spinBotSpeed = Value
        if spinBot then
            for i,v in pairs(hrp:GetChildren()) do
                if v.Name == "Spinning" then
                    v:Destroy()
                end
            end
            local Spin = Instance.new("BodyAngularVelocity")
            Spin.Name = "Spinning"
            Spin.Parent = hrp
            Spin.MaxTorque = Vector3.new(0, math.huge, 0)
            Spin.AngularVelocity = Vector3.new(0,Value,0)
        end
    end,
})

-- 配置管理部分
local ConfigSection = Misc:CreateSection("Configuration Management")
local configFileName = "universal_hub_config.json"

local function roundNumber(num, decimalPlaces)
    if not num then return 0 end
    decimalPlaces = decimalPlaces or 0
    local multiplier = 10 ^ decimalPlaces
    return math.floor(num * multiplier + 0.5) / multiplier
end

local function saveConfiguration()
    local configData = {
        AimbotEnabled = aimbotEnabled,
        AimParts = aimParts,
        Smoothing = roundNumber(smoothing, 6),
        PredictionStrength = roundNumber(predictionStrength, 6),
        AimFov = aimFov,
        WallCheck = wallCheck,
        StickyAim = stickyAimEnabled,
        TeamCheck = teamCheck,
        HealthCheck = healthCheck,
        MinHealth = minHealth,
        CircleColor = {R = roundNumber(circleColor.R, 3), G = roundNumber(circleColor.G, 3), B = roundNumber(circleColor.B, 3)},
        TargetedCircleColor = {R = roundNumber(targetedCircleColor.R, 3), G = roundNumber(targetedCircleColor.G, 3), B = roundNumber(targetedCircleColor.B, 3)},
        RainbowFov = rainbowFov,
        AntiAim = antiAim,
        AntiAimMethod = antiAimMethod,
        AntiAimAmountX = antiAimAmountX,
        AntiAimAmountY = antiAimAmountY,
        AntiAimAmountZ = antiAimAmountZ,
        RandomVeloRange = randomVeloRange,
        SpinBot = spinBot,
        SpinBotSpeed = spinBotSpeed,
        ESPEnabled = espEnabled,
        ESPTeamCheck = espTeamCheck,
        ESPColor = {R = roundNumber(espColor.R, 3), G = roundNumber(espColor.G, 3), B = roundNumber(espColor.B, 3)},
        ESPKeybind = Rayfield:GetConfiguration().ESPKeybind or "T"
    }
    
    local success, jsonData = pcall(function()
        return HttpService:JSONEncode(configData)
    end)
    
    if success then
        writefile(configFileName, jsonData)
        Rayfield:Notify({
            Title = "Configuration Saved", 
            Content = "All settings have been saved successfully!", 
            Duration = 1, 
            Image = 4483362458,
        })
        return true
    else
        Rayfield:Notify({
            Title = "Save Failed", 
            Content = "Failed to save configuration!", 
            Duration = 2, 
            Image = 4483362458,
        })
        return false
    end
end

local function loadConfiguration()
    if not isfile(configFileName) then
        return false
    end
    
    local success, configData = pcall(function()
        return HttpService:JSONDecode(readfile(configFileName))
    end)
    
    if success and configData then
        if configData.AimbotEnabled ~= nil then aimbotEnabled = configData.AimbotEnabled end
        if configData.AimParts ~= nil then aimParts = configData.AimParts end
        if configData.Smoothing ~= nil then smoothing = roundNumber(configData.Smoothing, 6) end
        if configData.PredictionStrength ~= nil then predictionStrength = roundNumber(configData.PredictionStrength, 6) end
        if configData.AimFov ~= nil then aimFov = configData.AimFov end
        if configData.WallCheck ~= nil then wallCheck = configData.WallCheck end
        if configData.StickyAim ~= nil then stickyAimEnabled = configData.StickyAim end
        if configData.TeamCheck ~= nil then teamCheck = configData.TeamCheck end
        if configData.HealthCheck ~= nil then healthCheck = configData.HealthCheck end
        if configData.MinHealth ~= nil then minHealth = configData.MinHealth end
        if configData.CircleColor ~= nil then circleColor = Color3.new(configData.CircleColor.R, configData.CircleColor.G, configData.CircleColor.B) end
        if configData.TargetedCircleColor ~= nil then targetedCircleColor = Color3.new(configData.TargetedCircleColor.R, configData.TargetedCircleColor.G, configData.TargetedCircleColor.B) end
        if configData.RainbowFov ~= nil then rainbowFov = configData.RainbowFov end
        if configData.AntiAim ~= nil then antiAim = configData.AntiAim end
        if configData.AntiAimMethod ~= nil then antiAimMethod = configData.AntiAimMethod end
        if configData.AntiAimAmountX ~= nil then antiAimAmountX = configData.AntiAimAmountX end
        if configData.AntiAimAmountY ~= nil then antiAimAmountY = configData.AntiAimAmountY end
        if configData.AntiAimAmountZ ~= nil then antiAimAmountZ = configData.AntiAimAmountZ end
        if configData.RandomVeloRange ~= nil then randomVeloRange = configData.RandomVeloRange end
        if configData.SpinBot ~= nil then spinBot = configData.SpinBot end
        if configData.SpinBotSpeed ~= nil then spinBotSpeed = configData.SpinBotSpeed end
        
        -- ESP 配置加载
        if configData.ESPEnabled ~= nil then espEnabled = configData.ESPEnabled end
        if configData.ESPTeamCheck ~= nil then espTeamCheck = configData.ESPTeamCheck end
        if configData.ESPColor ~= nil then espColor = Color3.new(configData.ESPColor.R, configData.ESPColor.G, configData.ESPColor.B) end
        
        -- 更新UI
        if aimbot then aimbot:Set(aimbotEnabled) end
        if aimpart then aimpart:Set(aimParts) end
        if smoothingslider then smoothingslider:Set(math.floor((1 - smoothing) * 100)) end
        if predictionstrength then predictionstrength:Set(predictionStrength) end
        if aimbotfov then aimbotfov:Set(aimFov) end
        if wallcheck then wallcheck:Set(wallCheck) end
        if stickyaim then stickyaim:Set(stickyAimEnabled) end
        if teamchecktoggle then teamchecktoggle:Set(teamCheck) end
        if healthchecktoggle then healthchecktoggle:Set(healthCheck) end
        if minhealth then minhealth:Set(minHealth) end
        if circlecolor then circlecolor:Set(circleColor) end
        if targetedcirclecolor then targetedcirclecolor:Set(targetedCircleColor) end
        if circlerainbow then circlerainbow:Set(rainbowFov) end
        if antiaimtoggle then antiaimtoggle:Set(antiAim) end
        if antiaimmethod then antiaimmethod:Set(antiAimMethod) end
        if antiaimamountx then antiaimamountx:Set(antiAimAmountX) end
        if antiaimamounty then antiaimamounty:Set(antiAimAmountY) end
        if antiaimamountz then antiaimamountz:Set(antiAimAmountZ) end
        if randomvelorange then randomvelorange:Set(randomVeloRange) end
        if spinbottoggle then spinbottoggle:Set(spinBot) end
        if spinbotspeed then spinbotspeed:Set(spinBotSpeed) end
        if esptoggle then esptoggle:Set(espEnabled) end
        if espteamcheck then espteamcheck:Set(espTeamCheck) end
        if espcolorpicker then espcolorpicker:Set(espColor) end
        
        fovCircle.Radius = aimFov
        fovCircle.Visible = aimbotEnabled and fovvisibility.CurrentValue
        
        return true
    else
        return false
    end
end

local function exportConfiguration()
    local configData = {
        AimbotEnabled = aimbotEnabled,
        AimParts = aimParts,
        Smoothing = roundNumber(smoothing, 6),
        PredictionStrength = roundNumber(predictionStrength, 6),
        AimFov = aimFov,
        WallCheck = wallCheck,
        StickyAim = stickyAimEnabled,
        TeamCheck = teamCheck,
        HealthCheck = healthCheck,
        MinHealth = minHealth,
        CircleColor = {R = roundNumber(circleColor.R, 3), G = roundNumber(circleColor.G, 3), B = roundNumber(circleColor.B, 3)},
        TargetedCircleColor = {R = roundNumber(targetedCircleColor.R, 3), G = roundNumber(targetedCircleColor.G, 3), B = roundNumber(targetedCircleColor.B, 3)},
        RainbowFov = rainbowFov,
        AntiAim = antiAim,
        AntiAimMethod = antiAimMethod,
        AntiAimAmountX = antiAimAmountX,
        AntiAimAmountY = antiAimAmountY,
        AntiAimAmountZ = antiAimAmountZ,
        RandomVeloRange = randomVeloRange,
        SpinBot = spinBot,
        SpinBotSpeed = spinBotSpeed,
        ESPEnabled = espEnabled,
        ESPTeamCheck = espTeamCheck,
        ESPColor = {R = roundNumber(espColor.R, 3), G = roundNumber(espColor.G, 3), B = roundNumber(espColor.B, 3)},
        ESPToggleKey = tostring(espToggleKey)
    }
    
    local success, jsonData = pcall(function()
        return HttpService:JSONEncode(configData)
    end)
    
    if success then
        setclipboard(jsonData)
        Rayfield:Notify({
            Title = "Config Exported", 
            Content = "Configuration copied to clipboard!", 
            Duration = 1, 
            Image = 4483362458,
        })
    else
        Rayfield:Notify({
            Title = "Export Failed", 
            Content = "Failed to export configuration!", 
            Duration = 2, 
            Image = 4483362458,
        })
    end
end

local function importConfiguration()
    Rayfield:Prompt({
        Title = "Import Configuration",
        SubTitle = "Paste your config JSON data:",
        Actions = {
            {
                Title = "Import",
                Args = {"ConfigData"}
            },
            {
                Title = "Cancel"
            }
        }
    }):Then(function(Result)
        if Result and Result[1] == "ConfigData" then
            local success, configData = pcall(function()
                return HttpService:JSONDecode(Result[2])
            end)
            
            if success and configData then
                if configData.AimbotEnabled ~= nil then aimbotEnabled = configData.AimbotEnabled end
                if configData.AimParts ~= nil then aimParts = configData.AimParts end
                if configData.Smoothing ~= nil then smoothing = roundNumber(configData.Smoothing, 6) end
                if configData.PredictionStrength ~= nil then predictionStrength = roundNumber(configData.PredictionStrength, 6) end
                if configData.AimFov ~= nil then aimFov = configData.AimFov end
                if configData.WallCheck ~= nil then wallCheck = configData.WallCheck end
                if configData.StickyAim ~= nil then stickyAimEnabled = configData.StickyAim end
                if configData.TeamCheck ~= nil then teamCheck = configData.TeamCheck end
                if configData.HealthCheck ~= nil then healthCheck = configData.HealthCheck end
                if configData.MinHealth ~= nil then minHealth = configData.MinHealth end
                if configData.CircleColor ~= nil then circleColor = Color3.new(configData.CircleColor.R, configData.CircleColor.G, configData.CircleColor.B) end
                if configData.TargetedCircleColor ~= nil then targetedCircleColor = Color3.new(configData.TargetedCircleColor.R, configData.TargetedCircleColor.G, configData.TargetedCircleColor.B) end
                if configData.RainbowFov ~= nil then rainbowFov = configData.RainbowFov end
                if configData.AntiAim ~= nil then antiAim = configData.AntiAim end
                if configData.AntiAimMethod ~= nil then antiAimMethod = configData.AntiAimMethod end
                if configData.AntiAimAmountX ~= nil then antiAimAmountX = configData.AntiAimAmountX end
                if configData.AntiAimAmountY ~= nil then antiAimAmountY = configData.AntiAimAmountY end
                if configData.AntiAimAmountZ ~= nil then antiAimAmountZ = configData.AntiAimAmountZ end
                if configData.RandomVeloRange ~= nil then randomVeloRange = configData.RandomVeloRange end
                if configData.SpinBot ~= nil then spinBot = configData.SpinBot end
                if configData.SpinBotSpeed ~= nil then spinBotSpeed = configData.SpinBotSpeed end
                if configData.ESPEnabled ~= nil then espEnabled = configData.ESPEnabled end
                if configData.ESPTeamCheck ~= nil then espTeamCheck = configData.ESPTeamCheck end
                if configData.ESPColor ~= nil then espColor = Color3.new(configData.ESPColor.R, configData.ESPColor.G, configData.ESPColor.B) end
                if configData.ESPToggleKey ~= nil then espToggleKey = Enum.KeyCode[configData.ESPToggleKey] end
                
                if aimbot then aimbot:Set(aimbotEnabled) end
                if aimpart then aimpart:Set(aimParts) end
                if smoothingslider then smoothingslider:Set(math.floor((1 - smoothing) * 100)) end
                if predictionstrength then predictionstrength:Set(predictionStrength) end
                if aimbotfov then aimbotfov:Set(aimFov) end
                if wallcheck then wallcheck:Set(wallCheck) end
                if stickyaim then stickyaim:Set(stickyAimEnabled) end
                if teamchecktoggle then teamchecktoggle:Set(teamCheck) end
                if healthchecktoggle then healthchecktoggle:Set(healthCheck) end
                if minhealth then minhealth:Set(minHealth) end
                if circlecolor then circlecolor:Set(circleColor) end
                if targetedcirclecolor then targetedcirclecolor:Set(targetedCircleColor) end
                if circlerainbow then circlerainbow:Set(rainbowFov) end
                if antiaimtoggle then antiaimtoggle:Set(antiAim) end
                if antiaimmethod then antiaimmethod:Set(antiAimMethod) end
                if antiaimamountx then antiaimamountx:Set(antiAimAmountX) end
                if antiaimamounty then antiaimamounty:Set(antiAimAmountY) end
                if antiaimamountz then antiaimamountz:Set(antiAimAmountZ) end
                if randomvelorange then randomvelorange:Set(randomVeloRange) end
                if spinbottoggle then spinbottoggle:Set(spinBot) end
                if spinbotspeed then spinbotspeed:Set(spinBotSpeed) end
                if esptoggle then esptoggle:Set(espEnabled) end
                if espteamcheck then espteamcheck:Set(espTeamCheck) end
                if espcolorpicker then espcolorpicker:Set(espColor) end
                if espKeybind then espKeybind:Set(tostring(espToggleKey)) end
                
                fovCircle.Radius = aimFov
                fovCircle.Visible = aimbotEnabled and fovvisibility.CurrentValue
                
                Rayfield:Notify({
                    Title = "Config Imported", 
                    Content = "Configuration imported successfully!", 
                    Duration = 1, 
                    Image = 4483362458,
                })
            else
                Rayfield:Notify({
                    Title = "Import Failed", 
                    Content = "Invalid config data format!", 
                    Duration = 2, 
                    Image = 4483362458,
                })
            end
        end
    end)
end

Misc:CreateButton({
    Name = "💾 Save Current Config",
    Callback = saveConfiguration
})

Misc:CreateButton({
    Name = "📂 Load Saved Config", 
    Callback = loadConfiguration
})

Misc:CreateButton({
    Name = "📤 Export Config to Clipboard",
    Callback = exportConfiguration
})

Misc:CreateButton({
    Name = "📥 Import Config from Clipboard",
    Callback = importConfiguration
})

spawn(function()
    wait(2)
    if isfile(configFileName) then
        loadConfiguration()
    end
end)

local function cleanup()
    if fovCircle then fovCircle:Remove() end
    
    for _, player in ipairs(players:GetPlayers()) do
        if player.Character and player.Character:FindFirstChild("ESP_Highlight") then
            player.Character.ESP_Highlight:Destroy()
        end
    end
end

plr:GetPropertyChangedSignal("Parent"):Connect(function()
    if not plr.Parent then
        cleanup()
    end
end)
